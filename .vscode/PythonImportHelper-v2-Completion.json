[
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "FileExtensionValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.base_user",
        "description": "django.contrib.auth.base_user",
        "isExtraImport": true,
        "detail": "django.contrib.auth.base_user",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "database_exists",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "create_database",
        "importPath": "sqlalchemy_utils",
        "description": "sqlalchemy_utils",
        "isExtraImport": true,
        "detail": "sqlalchemy_utils",
        "documentation": {}
    },
    {
        "label": "postgresql",
        "importPath": "local_settings",
        "description": "local_settings",
        "isExtraImport": true,
        "detail": "local_settings",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "UserCreateSerializer",
        "importPath": "djoser.serializers",
        "description": "djoser.serializers",
        "isExtraImport": true,
        "detail": "djoser.serializers",
        "documentation": {}
    },
    {
        "label": "UploadedFile",
        "importPath": "api.models",
        "description": "api.models",
        "isExtraImport": true,
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "UploadedFile",
        "importPath": "api.models",
        "description": "api.models",
        "isExtraImport": true,
        "detail": "api.models",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "social_book.api.migrations.0001_initial",
        "description": "social_book.api.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "social_book.api.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CustomUserAdmin",
        "kind": 6,
        "importPath": "social_book.api.admin",
        "description": "social_book.api.admin",
        "peekOfCode": "class CustomUserAdmin(UserAdmin):\n    list_display = (\n        'username', 'email', 'full_name', 'gender', 'credit_card_type', \n        'credit_card_number', 'cvc', 'expiration_date', 'public_visibility', \n        'age', 'birth_year', 'address', 'is_staff'\n    )\n    search_fields = ('username', 'email', 'full_name', 'credit_card_number', 'address')\n    ordering = ('username',)\n    fieldsets = (\n        (None, {'fields': ('username', 'password')}),",
        "detail": "social_book.api.admin",
        "documentation": {}
    },
    {
        "label": "UploadedFileAdmin",
        "kind": 6,
        "importPath": "social_book.api.admin",
        "description": "social_book.api.admin",
        "peekOfCode": "class UploadedFileAdmin(admin.ModelAdmin):\n    list_display = ('title', 'visibility', 'cost', 'year_published','uploaded_at')\n    list_filter = ('visibility', 'year_published')\n    search_fields = ('title', 'description')\n    ordering = ('-uploaded_at',)\n    fieldsets = (\n        (None, {\n            'fields': ('title', 'description', 'file', 'visibility', 'cost', 'year_published')\n        }),\n        ('Advanced options', {",
        "detail": "social_book.api.admin",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "social_book.api.apps",
        "description": "social_book.api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'api'",
        "detail": "social_book.api.apps",
        "documentation": {}
    },
    {
        "label": "UserRegistrationForm",
        "kind": 6,
        "importPath": "social_book.api.forms",
        "description": "social_book.api.forms",
        "peekOfCode": "class UserRegistrationForm(forms.ModelForm):\n    password = forms.CharField(\n        label='Password',\n        widget=forms.PasswordInput(attrs={'class': 'form-control', 'type': 'password', })\n    )\n    password2 = forms.CharField(\n        label='Confirm Password',\n        widget=forms.PasswordInput(attrs={'class': 'form-control','type': 'password'})\n    )\n    email = forms.EmailField(",
        "detail": "social_book.api.forms",
        "documentation": {}
    },
    {
        "label": "UserLoginForm",
        "kind": 6,
        "importPath": "social_book.api.forms",
        "description": "social_book.api.forms",
        "peekOfCode": "class UserLoginForm(AuthenticationForm):\n    username = forms.CharField(\n        label='Username',\n        widget=forms.TextInput(attrs={\n            'class': 'form-control form-control-lg', \n            'placeholder': 'Username'\n        })\n    )\n    password = forms.CharField(label='Password', widget=forms.PasswordInput(attrs={'class': 'form-control form-control-lg',\n        'placeholder': '**********'}))",
        "detail": "social_book.api.forms",
        "documentation": {}
    },
    {
        "label": "UploadFileForm",
        "kind": 6,
        "importPath": "social_book.api.forms",
        "description": "social_book.api.forms",
        "peekOfCode": "class UploadFileForm(forms.ModelForm):\n    title = forms.CharField(\n        required=True,\n        label='Title',\n        widget=forms.TextInput(attrs={'class': 'form-control', 'type': 'text'})\n    )\n    description = forms.CharField(\n        required=True,\n        label='Description',\n        widget=forms.Textarea(attrs={'class': 'form-control', 'rows': 5})",
        "detail": "social_book.api.forms",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "social_book.api.forms",
        "description": "social_book.api.forms",
        "peekOfCode": "User = get_user_model()\nclass UserRegistrationForm(forms.ModelForm):\n    password = forms.CharField(\n        label='Password',\n        widget=forms.PasswordInput(attrs={'class': 'form-control', 'type': 'password', })\n    )\n    password2 = forms.CharField(\n        label='Confirm Password',\n        widget=forms.PasswordInput(attrs={'class': 'form-control','type': 'password'})\n    )",
        "detail": "social_book.api.forms",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "social_book.api.manager",
        "description": "social_book.api.manager",
        "peekOfCode": "class UserManager(BaseUserManager):\n    def create_user(self, username, email, password=None, **extra_fields):\n        if not username:\n            raise ValueError('The Username must be set')\n        if not email:\n            raise ValueError('The Email must be set')\n        email = self.normalize_email(email)\n        user = self.model(username=username, email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)",
        "detail": "social_book.api.manager",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "social_book.api.models",
        "description": "social_book.api.models",
        "peekOfCode": "class User(AbstractUser):\n    full_name = models.CharField(max_length=255, blank=True, null=True)\n    gender = models.CharField(max_length=10, choices=[('Male', 'Male'), ('Female', 'Female')], blank=True, null=True)\n    credit_card_type = models.CharField(max_length=50, blank=True, null=True)\n    credit_card_number = models.CharField(max_length=20, blank=True, null=True)\n    cvc = models.CharField(max_length=4, blank=True, null=True)\n    expiration_date = models.DateField(blank=True, null=True)\n    public_visibility = models.BooleanField(default=True)\n    age = models.IntegerField(blank=True, null=True)\n    birth_year = models.IntegerField(blank=True, null=True)",
        "detail": "social_book.api.models",
        "documentation": {}
    },
    {
        "label": "UploadedFile",
        "kind": 6,
        "importPath": "social_book.api.models",
        "description": "social_book.api.models",
        "peekOfCode": "class UploadedFile(models.Model):\n    TITLE_MAX_LENGTH = 255\n    title = models.CharField(max_length=TITLE_MAX_LENGTH)\n    description = models.TextField()\n    file = models.FileField(upload_to='uploads/', \n                            validators=[FileExtensionValidator(['pdf', 'jpeg', 'jpg'])])\n    visibility = models.BooleanField(default=True)  \n    cost = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)\n    year_published = models.IntegerField()\n    uploaded_at = models.DateTimeField(auto_now_add=True)",
        "detail": "social_book.api.models",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "social_book.api.pandas&Num",
        "description": "social_book.api.pandas&Num",
        "peekOfCode": "data = {\n    'Column1': np.random.randint(1, 100, size=10),\n    'Column2': np.random.randint(1, 100, size=10),\n    'Column3': np.random.randint(1, 100, size=10)\n}\ndf = pd.DataFrame(data)\nprint(\"Task 2: DataFrame Created (10x3)\\n\", df, \"\\n\")\n# Task 3: \nfilter_value = 50\nfiltered_df = df[df['Column1'] > filter_value]",
        "detail": "social_book.api.pandas&Num",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "social_book.api.pandas&Num",
        "description": "social_book.api.pandas&Num",
        "peekOfCode": "df = pd.DataFrame(data)\nprint(\"Task 2: DataFrame Created (10x3)\\n\", df, \"\\n\")\n# Task 3: \nfilter_value = 50\nfiltered_df = df[df['Column1'] > filter_value]\nprint(f\"Task 3: DataFrame Filtered (Column1 > {filter_value})\\n\", filtered_df, \"\\n\")\n# Task 4: \nfiltered_df_2cols = df[['Column1', 'Column2']]\nprint(\"Task 4: DataFrame with 2 Columns (Column1 and Column2)\\n\", filtered_df_2cols, \"\\n\")\n# Task 5:",
        "detail": "social_book.api.pandas&Num",
        "documentation": {}
    },
    {
        "label": "filter_value",
        "kind": 5,
        "importPath": "social_book.api.pandas&Num",
        "description": "social_book.api.pandas&Num",
        "peekOfCode": "filter_value = 50\nfiltered_df = df[df['Column1'] > filter_value]\nprint(f\"Task 3: DataFrame Filtered (Column1 > {filter_value})\\n\", filtered_df, \"\\n\")\n# Task 4: \nfiltered_df_2cols = df[['Column1', 'Column2']]\nprint(\"Task 4: DataFrame with 2 Columns (Column1 and Column2)\\n\", filtered_df_2cols, \"\\n\")\n# Task 5:\ndf['Column2'] = df['Column2'].apply(lambda x: 80 if x > 80 else x)\nprint(\"Task 5: DataFrame After Replacing Values in Column2 (values > 80 are replaced with 80)\\n\", df, \"\\n\")\n# Task 6: ",
        "detail": "social_book.api.pandas&Num",
        "documentation": {}
    },
    {
        "label": "filtered_df",
        "kind": 5,
        "importPath": "social_book.api.pandas&Num",
        "description": "social_book.api.pandas&Num",
        "peekOfCode": "filtered_df = df[df['Column1'] > filter_value]\nprint(f\"Task 3: DataFrame Filtered (Column1 > {filter_value})\\n\", filtered_df, \"\\n\")\n# Task 4: \nfiltered_df_2cols = df[['Column1', 'Column2']]\nprint(\"Task 4: DataFrame with 2 Columns (Column1 and Column2)\\n\", filtered_df_2cols, \"\\n\")\n# Task 5:\ndf['Column2'] = df['Column2'].apply(lambda x: 80 if x > 80 else x)\nprint(\"Task 5: DataFrame After Replacing Values in Column2 (values > 80 are replaced with 80)\\n\", df, \"\\n\")\n# Task 6: \ndata2 = {",
        "detail": "social_book.api.pandas&Num",
        "documentation": {}
    },
    {
        "label": "filtered_df_2cols",
        "kind": 5,
        "importPath": "social_book.api.pandas&Num",
        "description": "social_book.api.pandas&Num",
        "peekOfCode": "filtered_df_2cols = df[['Column1', 'Column2']]\nprint(\"Task 4: DataFrame with 2 Columns (Column1 and Column2)\\n\", filtered_df_2cols, \"\\n\")\n# Task 5:\ndf['Column2'] = df['Column2'].apply(lambda x: 80 if x > 80 else x)\nprint(\"Task 5: DataFrame After Replacing Values in Column2 (values > 80 are replaced with 80)\\n\", df, \"\\n\")\n# Task 6: \ndata2 = {\n    'Column1': np.random.randint(1, 100, size=10),\n    'Column2': np.random.randint(1, 100, size=10),\n    'Column3': np.random.randint(1, 100, size=10)",
        "detail": "social_book.api.pandas&Num",
        "documentation": {}
    },
    {
        "label": "df['Column2']",
        "kind": 5,
        "importPath": "social_book.api.pandas&Num",
        "description": "social_book.api.pandas&Num",
        "peekOfCode": "df['Column2'] = df['Column2'].apply(lambda x: 80 if x > 80 else x)\nprint(\"Task 5: DataFrame After Replacing Values in Column2 (values > 80 are replaced with 80)\\n\", df, \"\\n\")\n# Task 6: \ndata2 = {\n    'Column1': np.random.randint(1, 100, size=10),\n    'Column2': np.random.randint(1, 100, size=10),\n    'Column3': np.random.randint(1, 100, size=10)\n}\ndf2 = pd.DataFrame(data2)\nappended_df = pd.concat([df, df2], ignore_index=True)",
        "detail": "social_book.api.pandas&Num",
        "documentation": {}
    },
    {
        "label": "data2",
        "kind": 5,
        "importPath": "social_book.api.pandas&Num",
        "description": "social_book.api.pandas&Num",
        "peekOfCode": "data2 = {\n    'Column1': np.random.randint(1, 100, size=10),\n    'Column2': np.random.randint(1, 100, size=10),\n    'Column3': np.random.randint(1, 100, size=10)\n}\ndf2 = pd.DataFrame(data2)\nappended_df = pd.concat([df, df2], ignore_index=True)\nprint(\"Task 6: Appended DataFrame\\n\", appended_df)",
        "detail": "social_book.api.pandas&Num",
        "documentation": {}
    },
    {
        "label": "df2",
        "kind": 5,
        "importPath": "social_book.api.pandas&Num",
        "description": "social_book.api.pandas&Num",
        "peekOfCode": "df2 = pd.DataFrame(data2)\nappended_df = pd.concat([df, df2], ignore_index=True)\nprint(\"Task 6: Appended DataFrame\\n\", appended_df)",
        "detail": "social_book.api.pandas&Num",
        "documentation": {}
    },
    {
        "label": "appended_df",
        "kind": 5,
        "importPath": "social_book.api.pandas&Num",
        "description": "social_book.api.pandas&Num",
        "peekOfCode": "appended_df = pd.concat([df, df2], ignore_index=True)\nprint(\"Task 6: Appended DataFrame\\n\", appended_df)",
        "detail": "social_book.api.pandas&Num",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "social_book.api.sqlalchemy_config",
        "description": "social_book.api.sqlalchemy_config",
        "peekOfCode": "class Book(Base):\n    __tablename__ = 'books'  # Table name\n    id = Column(Integer, primary_key=True)\n    title = Column(String, nullable=False)\n    author = Column(String, nullable=False)\n    isbn = Column(String, unique=True, nullable=False)\n    published_year = Column(Integer)\n    publisher = Column(String)\n    def __repr__(self):\n        return (f\"<Book(id={self.id}, title={self.title}, author={self.author}, \"",
        "detail": "social_book.api.sqlalchemy_config",
        "documentation": {}
    },
    {
        "label": "get_engine",
        "kind": 2,
        "importPath": "social_book.api.sqlalchemy_config",
        "description": "social_book.api.sqlalchemy_config",
        "peekOfCode": "def get_engine(user, password, host, port, database):\n    url = f\"postgresql://{user}:{password}@{host}:{port}/{database}\"\n    if not database_exists(url):\n        create_database(url)\n    engine = create_engine(url, pool_size=50, echo=False)\n    return engine\n# Function to get engine from settings\ndef get_engine_from_settings():\n    keys = ['pguser', 'pgpassword', 'pghost', 'pgport', 'pgdatabase']\n    if not all(key in settings for key in keys):",
        "detail": "social_book.api.sqlalchemy_config",
        "documentation": {}
    },
    {
        "label": "get_engine_from_settings",
        "kind": 2,
        "importPath": "social_book.api.sqlalchemy_config",
        "description": "social_book.api.sqlalchemy_config",
        "peekOfCode": "def get_engine_from_settings():\n    keys = ['pguser', 'pgpassword', 'pghost', 'pgport', 'pgdatabase']\n    if not all(key in settings for key in keys):\n        raise Exception(\"Bad config file\")\n    return get_engine(settings['pguser'], settings['pgpassword'], settings['pghost'], settings['pgport'], settings['pgdatabase'])\n# Function to get the SQLAlchemy session\ndef get_session():\n    engine = get_engine_from_settings()\n    # Create the books table if it doesn't exist\n    Base.metadata.create_all(engine)",
        "detail": "social_book.api.sqlalchemy_config",
        "documentation": {}
    },
    {
        "label": "get_session",
        "kind": 2,
        "importPath": "social_book.api.sqlalchemy_config",
        "description": "social_book.api.sqlalchemy_config",
        "peekOfCode": "def get_session():\n    engine = get_engine_from_settings()\n    # Create the books table if it doesn't exist\n    Base.metadata.create_all(engine)\n    Session = sessionmaker(bind=engine)\n    return Session()\n# Function to insert a new book into the books table\ndef add_book():\n    session = get_session()\n    # Prompt user for input",
        "detail": "social_book.api.sqlalchemy_config",
        "documentation": {}
    },
    {
        "label": "add_book",
        "kind": 2,
        "importPath": "social_book.api.sqlalchemy_config",
        "description": "social_book.api.sqlalchemy_config",
        "peekOfCode": "def add_book():\n    session = get_session()\n    # Prompt user for input\n    title = input(\"Enter the book title: \")\n    author = input(\"Enter the author's name: \")\n    isbn = input(\"Enter the ISBN number: \")\n    published_year = int(input(\"Enter the year of publication: \"))\n    publisher = input(\"Enter the publisher's name: \")\n    # Create a new Book instance\n    new_book = Book(title=title, author=author, isbn=isbn, published_year=published_year, publisher=publisher)",
        "detail": "social_book.api.sqlalchemy_config",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "social_book.api.sqlalchemy_config",
        "description": "social_book.api.sqlalchemy_config",
        "peekOfCode": "Base = declarative_base()\n# Define the Book model\nclass Book(Base):\n    __tablename__ = 'books'  # Table name\n    id = Column(Integer, primary_key=True)\n    title = Column(String, nullable=False)\n    author = Column(String, nullable=False)\n    isbn = Column(String, unique=True, nullable=False)\n    published_year = Column(Integer)\n    publisher = Column(String)",
        "detail": "social_book.api.sqlalchemy_config",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "social_book.api.urls",
        "description": "social_book.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('register/', views.register,name='register'),\n    path('login/', views.user_login,name='login'),\n    path('logout/', views.user_logout,name='logout'),\n    path('authors&sellers/', views.authors_sellers,name='authors&sellers'),\n    path('upload/', views.upload_file,name='upload'),\n    path('uploaded_files/', views.uploaded_files,name='uploaded_files'),\n    path('profile', views.user_profile,name='profile'),\n]",
        "detail": "social_book.api.urls",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "social_book.api.views",
        "description": "social_book.api.views",
        "peekOfCode": "def register(request):\n    if request.method == 'POST':\n        form = UserRegistrationForm(request.POST)\n        if form.is_valid():\n            try:\n                new_user = form.save(commit=False)\n                new_user.set_password(form.cleaned_data['password'])\n                new_user.save()\n                user = authenticate(username=new_user.username, password=form.cleaned_data['password'])\n                login(request, user)",
        "detail": "social_book.api.views",
        "documentation": {}
    },
    {
        "label": "user_login",
        "kind": 2,
        "importPath": "social_book.api.views",
        "description": "social_book.api.views",
        "peekOfCode": "def user_login(request):\n    if request.method == 'POST':\n        form = UserLoginForm(data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:    \n                login(request, user)\n                messages.success(request, \"You have successfully logged in!\")",
        "detail": "social_book.api.views",
        "documentation": {}
    },
    {
        "label": "user_logout",
        "kind": 2,
        "importPath": "social_book.api.views",
        "description": "social_book.api.views",
        "peekOfCode": "def user_logout(request):\n    if request.user.is_authenticated:\n        logout(request)\n    return redirect('/')\ndef authors_sellers(request):\n    authors_sellers=User.objects.filter(public_visibility=True)\n    return render(request, 'pages/Authors&Sellers.html',{'authors_sellers':authors_sellers})\n@login_required\ndef upload_file(request):\n    if request.method == 'POST':",
        "detail": "social_book.api.views",
        "documentation": {}
    },
    {
        "label": "authors_sellers",
        "kind": 2,
        "importPath": "social_book.api.views",
        "description": "social_book.api.views",
        "peekOfCode": "def authors_sellers(request):\n    authors_sellers=User.objects.filter(public_visibility=True)\n    return render(request, 'pages/Authors&Sellers.html',{'authors_sellers':authors_sellers})\n@login_required\ndef upload_file(request):\n    if request.method == 'POST':\n        form = UploadFileForm(request.POST, request.FILES)\n        if form.is_valid():\n            uploaded_file = form.save(commit=False)  \n            uploaded_file.user = request.user ",
        "detail": "social_book.api.views",
        "documentation": {}
    },
    {
        "label": "upload_file",
        "kind": 2,
        "importPath": "social_book.api.views",
        "description": "social_book.api.views",
        "peekOfCode": "def upload_file(request):\n    if request.method == 'POST':\n        form = UploadFileForm(request.POST, request.FILES)\n        if form.is_valid():\n            uploaded_file = form.save(commit=False)  \n            uploaded_file.user = request.user \n            uploaded_file.save()  \n            return redirect('/api/upload')\n    else:\n        form = UploadFileForm()",
        "detail": "social_book.api.views",
        "documentation": {}
    },
    {
        "label": "uploaded_files",
        "kind": 2,
        "importPath": "social_book.api.views",
        "description": "social_book.api.views",
        "peekOfCode": "def uploaded_files(request):\n    files = UploadedFile.objects.all()\n    return render(request, 'pages/uploaded_files.html', {'files': files})\n@login_required\ndef user_profile(request):\n    books=UploadedFile.objects.filter(user=request.user)\n    return render(request, 'user/profile.html',{'books':books})",
        "detail": "social_book.api.views",
        "documentation": {}
    },
    {
        "label": "user_profile",
        "kind": 2,
        "importPath": "social_book.api.views",
        "description": "social_book.api.views",
        "peekOfCode": "def user_profile(request):\n    books=UploadedFile.objects.filter(user=request.user)\n    return render(request, 'user/profile.html',{'books':books})",
        "detail": "social_book.api.views",
        "documentation": {}
    },
    {
        "label": "DjoserauthapiConfig",
        "kind": 6,
        "importPath": "social_book.djoserauthapi.apps",
        "description": "social_book.djoserauthapi.apps",
        "peekOfCode": "class DjoserauthapiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'djoserauthapi'",
        "detail": "social_book.djoserauthapi.apps",
        "documentation": {}
    },
    {
        "label": "UserCreateSerializer",
        "kind": 6,
        "importPath": "social_book.djoserauthapi.serializers",
        "description": "social_book.djoserauthapi.serializers",
        "peekOfCode": "class UserCreateSerializer(UserCreateSerializer):\n    class Meta(UserCreateSerializer.Meta):\n        model = User\n        fields = ('id', 'name', 'email', 'password', 'username')  \nclass UploadedFileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UploadedFile\n        fields = ['id', 'title', 'description', 'file', 'visibility', 'cost', 'year_published', 'uploaded_at']",
        "detail": "social_book.djoserauthapi.serializers",
        "documentation": {}
    },
    {
        "label": "UploadedFileSerializer",
        "kind": 6,
        "importPath": "social_book.djoserauthapi.serializers",
        "description": "social_book.djoserauthapi.serializers",
        "peekOfCode": "class UploadedFileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UploadedFile\n        fields = ['id', 'title', 'description', 'file', 'visibility', 'cost', 'year_published', 'uploaded_at']",
        "detail": "social_book.djoserauthapi.serializers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "social_book.djoserauthapi.serializers",
        "description": "social_book.djoserauthapi.serializers",
        "peekOfCode": "User = get_user_model()\nclass UserCreateSerializer(UserCreateSerializer):\n    class Meta(UserCreateSerializer.Meta):\n        model = User\n        fields = ('id', 'name', 'email', 'password', 'username')  \nclass UploadedFileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UploadedFile\n        fields = ['id', 'title', 'description', 'file', 'visibility', 'cost', 'year_published', 'uploaded_at']",
        "detail": "social_book.djoserauthapi.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "social_book.djoserauthapi.urls",
        "description": "social_book.djoserauthapi.urls",
        "peekOfCode": "urlpatterns = [\n    path('auth/', include('djoser.urls')),  # Updated line\n    path('auth/', include('djoser.urls.jwt')),  # If using JWT authentication\n    path('user/files/', UserFilesView.as_view(), name='user-files'),\n]",
        "detail": "social_book.djoserauthapi.urls",
        "documentation": {}
    },
    {
        "label": "UserFilesView",
        "kind": 6,
        "importPath": "social_book.djoserauthapi.views",
        "description": "social_book.djoserauthapi.views",
        "peekOfCode": "class UserFilesView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        user = request.user\n        uploaded_files = UploadedFile.objects.filter(user=user)\n        if not uploaded_files.exists():\n            return Response({\"detail\": \"No files found for this user.\"}, status=status.HTTP_404_NOT_FOUND)\n        serializer = UploadedFileSerializer(uploaded_files, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)",
        "detail": "social_book.djoserauthapi.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "social_book.social_book.asgi",
        "description": "social_book.social_book.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "social_book.social_book.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-wn_@)(7^dcxp4bm#2uh7=!x6k7%qdak69g@0#1(4dvl^(8h_&='\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-wn_@)(7^dcxp4bm#2uh7=!x6k7%qdak69g@0#1(4dvl^(8h_&='\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'api',",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'api',\n    'rest_framework',\n    'djoser',",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    \"corsheaders.middleware.CorsMiddleware\",\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "ROOT_URLCONF = 'social_book.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "WSGI_APPLICATION = 'social_book.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = '/static/'\nAUTH_USER_MODEL = 'api.User'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static')",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = '/static/'\nAUTH_USER_MODEL = 'api.User'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static')\n]",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = '/static/'\nAUTH_USER_MODEL = 'api.User'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static')\n]\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = '/static/'\nAUTH_USER_MODEL = 'api.User'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static')\n]\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nAUTH_USER_MODEL = 'api.User'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static')\n]\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'api.User'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static')\n]\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Djoser settings ",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static')\n]\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Djoser settings \nDJOSER = {",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Djoser settings \nDJOSER = {\n    'LOGIN_FIELD': 'email',\n    'USER_CREATE_PASSWORD_RETYPE': True,\n    'ACTIVATION_URL': '/activate/{uid}/{token}',",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Djoser settings \nDJOSER = {\n    'LOGIN_FIELD': 'email',\n    'USER_CREATE_PASSWORD_RETYPE': True,\n    'ACTIVATION_URL': '/activate/{uid}/{token}',\n    'SEND_ACTIVATION_EMAIL': True,",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Djoser settings \nDJOSER = {\n    'LOGIN_FIELD': 'email',\n    'USER_CREATE_PASSWORD_RETYPE': True,\n    'ACTIVATION_URL': '/activate/{uid}/{token}',\n    'SEND_ACTIVATION_EMAIL': True,\n    'SEND_CONFIRMATION_EMAIL': True,\n    'PASSWORD_CHANGE_EMAIL_CONFIRMATION': True,\n    'PASSWORD_RESET_CONFIRM_URL': 'password-reset/{uid}/{token}',",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "DJOSER",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "DJOSER = {\n    'LOGIN_FIELD': 'email',\n    'USER_CREATE_PASSWORD_RETYPE': True,\n    'ACTIVATION_URL': '/activate/{uid}/{token}',\n    'SEND_ACTIVATION_EMAIL': True,\n    'SEND_CONFIRMATION_EMAIL': True,\n    'PASSWORD_CHANGE_EMAIL_CONFIRMATION': True,\n    'PASSWORD_RESET_CONFIRM_URL': 'password-reset/{uid}/{token}',\n    'SET_PASSWORD_RETYPE': True,\n    'PASSWORD_RESET_SHOW_EMAIL_NOT_FOUND': True,",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",\n    \"http://127.0.0.1:3000\"\n]\n# Rest framework settings \nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASS': (\n        'rest_framework.permissions.IsAuthenticated'\n    ),\n    'DEFAULT_AUTHENTICATION_CLASSES': (",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASS': (\n        'rest_framework.permissions.IsAuthenticated'\n    ),\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('JWT',),",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('JWT',),\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=5),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=1),\n    \"ROTATE_REFRESH_TOKENS\": True,\n    \"UPDATE_LAST_LOGIN\": True,\n}\n# Email settings \nEMAIL_USE_TLS = True\nEMAIL_HOST = 'smtp.gmail.com'",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_HOST_USER = 'mangesh2003vispute@gmail.com'\nEMAIL_HOST_PASSWORD = 'bxnd nvlx eazh nbcz'\nEMAIL_PORT = 587    \nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.gmail.com'\nEMAIL_HOST_USER = 'mangesh2003vispute@gmail.com'\nEMAIL_HOST_PASSWORD = 'bxnd nvlx eazh nbcz'\nEMAIL_PORT = 587    \nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "EMAIL_HOST_USER = 'mangesh2003vispute@gmail.com'\nEMAIL_HOST_PASSWORD = 'bxnd nvlx eazh nbcz'\nEMAIL_PORT = 587    \nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = 'bxnd nvlx eazh nbcz'\nEMAIL_PORT = 587    \nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "EMAIL_PORT = 587    \nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "social_book.social_book.settings",
        "description": "social_book.social_book.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'",
        "detail": "social_book.social_book.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "social_book.social_book.urls",
        "description": "social_book.social_book.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.index, name='index'),\n    path('admin/', admin.site.urls),\n    path('api/', include('api.urls')),\n    path('djoser/', include('djoserauthapi.urls')),\n]\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "social_book.social_book.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "social_book.social_book.views",
        "description": "social_book.social_book.views",
        "peekOfCode": "def index(request):\n    return render(request, 'index.html')",
        "detail": "social_book.social_book.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "social_book.social_book.wsgi",
        "description": "social_book.social_book.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "social_book.social_book.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "social_book.manage",
        "description": "social_book.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'social_book.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "social_book.manage",
        "documentation": {}
    }
]